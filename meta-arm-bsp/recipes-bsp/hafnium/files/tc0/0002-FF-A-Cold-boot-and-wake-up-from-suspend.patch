Upstream-Status: Pending [https://review.trustedfirmware.org/c/hafnium/hafnium/+/6010/29]
Signed-off-by: Arunachalam Ganapathy <arunachalam.ganapathy@arm.com>

From ebd568637627fa895e6e7f479675c650414cc240 Mon Sep 17 00:00:00 2001
From: Max Shvetsov <maksims.svecovs@arm.com>
Date: Thu, 27 Aug 2020 12:39:50 +0100
Subject: [PATCH 3/5] FF-A: Cold boot and wake up from suspend.

WIP: Currently there is zero entry-point passed with no arguments, This
will be reworked once a proper way to pass this information will be
defined.

Change-Id: Ic6050af16d4081ca31729744995fbb999b170e11
Signed-off-by: Max Shvetsov <maksims.svecovs@arm.com>
Signed-off-by: Olivier Deprez <olivier.deprez@arm.com>
---
 inc/hf/vcpu.h                              |  2 ++
 src/arch/aarch64/hypervisor/psci_handler.c |  2 ++
 src/main.c                                 | 20 ++++++++++++++++++++
 3 files changed, 24 insertions(+)

diff --git a/inc/hf/vcpu.h b/inc/hf/vcpu.h
index 5439719..98f3a50 100644
--- a/inc/hf/vcpu.h
+++ b/inc/hf/vcpu.h
@@ -86,6 +86,8 @@ struct vcpu {
 	 * a result of a prior FFA_MSG_SEND_DIRECT_REQ invocation.
 	 */
 	ffa_vm_id_t direct_request_origin_vm_id;
+
+	ipaddr_t psci_handler[1];
 };
 
 /** Encapsulates a vCPU whose lock is held. */
diff --git a/src/arch/aarch64/hypervisor/psci_handler.c b/src/arch/aarch64/hypervisor/psci_handler.c
index b323faa..c892385 100644
--- a/src/arch/aarch64/hypervisor/psci_handler.c
+++ b/src/arch/aarch64/hypervisor/psci_handler.c
@@ -389,6 +389,8 @@ bool psci_secondary_vm_handler(struct vcpu *vcpu, uint32_t func, uintreg_t arg0,
 
 		target_vcpu = vm_get_vcpu(vm, target_vcpu_index);
 
+		target_vcpu->psci_handler[0] = entry_point_address;
+
 		if (vcpu_secondary_reset_and_start(
 			    target_vcpu, entry_point_address, context_id)) {
 #if SECURE_WORLD == 0
diff --git a/src/main.c b/src/main.c
index 3cc932e..2c3d1a5 100644
--- a/src/main.c
+++ b/src/main.c
@@ -7,6 +7,7 @@
  */
 
 #include "hf/cpu.h"
+#include "hf/dlog.h"
 #include "hf/vm.h"
 
 /**
@@ -18,6 +19,18 @@ struct vcpu *cpu_main(struct cpu *c)
 	struct vm *first_boot;
 	struct vcpu *vcpu;
 
+#if SECURE_WORLD == 1
+	if (c->is_on == false) {
+		/*
+		 * This is the PSCI warm reset path (svc_cpu_on_finish
+		 * handler relayed by SPMD). Notice currenty the "first_boot"
+		 * VM is resumed on any CPU on event.
+		 */
+		(void)cpu_on(c, ipa_init(0UL), 0UL);
+		dlog_verbose("%s: cpu mpidr 0x%x on\n", __func__, c->id);
+	}
+#endif
+
 	/*
 	 * This returns the PVM in the normal worls and the first
 	 * booted Secure Partition in the secure world.
@@ -26,6 +39,13 @@ struct vcpu *cpu_main(struct cpu *c)
 
 	vcpu = vm_get_vcpu(first_boot, cpu_index(c));
 
+	if (vcpu->psci_handler[0].ipa) {
+		struct vcpu_locked vcpu_locked = vcpu_lock(vcpu);
+
+		vcpu_on(vcpu_locked, vcpu->psci_handler[0], 0);
+		vcpu_unlock(&vcpu_locked);
+	}
+
 	vcpu->cpu = c;
 
 	arch_cpu_init();
-- 
2.29.2

