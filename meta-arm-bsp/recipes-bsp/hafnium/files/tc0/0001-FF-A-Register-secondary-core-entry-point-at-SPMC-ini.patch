Upstream-Status: Pending [https://review.trustedfirmware.org/c/hafnium/hafnium/+/6009/27]
Signed-off-by: Arunachalam Ganapathy <arunachalam.ganapathy@arm.com>

From 06e7602ddb383e0f88c19feaa216c24cf032a136 Mon Sep 17 00:00:00 2001
From: Max Shvetsov <maksims.svecovs@arm.com>
Date: Thu, 27 Aug 2020 12:37:57 +0100
Subject: [PATCH 2/5] FF-A: Register secondary core entry point at SPMC init.

When the primary physical core boots the SPMC registers its secondary
physical core entry points to the SPMD. All Secure Partition are then
initialized on their primary Execution Contexts. A Secure Partition
calls PSCI_CPU_ON from its first EC (trapped to the SPMC) passing
entry point addresses of secondary ECs. ECs are turned "on" in their
SPMC internal states, although they do not run yet (the service call
does not reach the EL3 PSCI layer). Later, when the NWd (Hypervisor
or OS Kernel) boots, it calls PSCI_CPU_ON for waking up physical cores
down to EL3. The PSCI layer calls into SPMD PM hooks, then the SPMD
calls into the SPMC by an exception return to the registered secondary
entry point. The target secondary core then reaches Hafnium vcpu_main.

Change-Id: I2bd42ea54e1a7feebff20e878345ec196ff352e9
Signed-off-by: Max Shvetsov <maksims.svecovs@arm.com>
Signed-off-by: Olivier Deprez <olivier.deprez@arm.com>
---
 inc/hf/arch/init.h                          |  7 ++++
 inc/hf/arch/other_world.h                   |  2 ++
 src/arch/aarch64/hypervisor/other_world.c   | 29 +++++++++++++++
 src/arch/aarch64/hypervisor/psci_handler.c  | 40 +++++++++++++++++++++
 src/arch/aarch64/inc/hf/arch/spmd_helpers.h | 15 ++++++++
 src/cpu.c                                   |  2 +-
 src/init.c                                  |  2 ++
 src/load.c                                  |  3 ++
 src/main.c                                  | 12 ++++---
 9 files changed, 106 insertions(+), 6 deletions(-)
 create mode 100644 src/arch/aarch64/inc/hf/arch/spmd_helpers.h

diff --git a/inc/hf/arch/init.h b/inc/hf/arch/init.h
index 5205e4e..ef0e48f 100644
--- a/inc/hf/arch/init.h
+++ b/inc/hf/arch/init.h
@@ -8,6 +8,8 @@
 
 #pragma once
 
+#include "hf/boot_params.h"
+
 /**
  * Performs arch specific boot time initialization.
  *
@@ -15,3 +17,8 @@
  * possible.
  */
 void arch_one_time_init(void);
+
+/**
+ * Sets up secondary cores.
+ */
+void arch_psci_secondary_core_init(const struct boot_params *params);
diff --git a/inc/hf/arch/other_world.h b/inc/hf/arch/other_world.h
index 68c0b45..860a142 100644
--- a/inc/hf/arch/other_world.h
+++ b/inc/hf/arch/other_world.h
@@ -20,3 +20,5 @@ bool arch_other_world_is_direct_request_valid(struct vcpu *current,
 bool arch_other_world_is_direct_response_valid(struct vcpu *current,
 					       ffa_vm_id_t sender_vm_id,
 					       ffa_vm_id_t receiver_vm_id);
+void arch_other_world_init_ffa_id(void);
+ffa_vm_id_t arch_other_world_get_ffa_id(void);
diff --git a/src/arch/aarch64/hypervisor/other_world.c b/src/arch/aarch64/hypervisor/other_world.c
index 74a2bb1..6b5bb16 100644
--- a/src/arch/aarch64/hypervisor/other_world.c
+++ b/src/arch/aarch64/hypervisor/other_world.c
@@ -23,6 +23,10 @@
 alignas(PAGE_SIZE) static uint8_t other_world_send_buffer[HF_MAILBOX_SIZE];
 alignas(PAGE_SIZE) static uint8_t other_world_recv_buffer[HF_MAILBOX_SIZE];
 
+#else
+
+static ffa_vm_id_t physical_ffa_id;
+
 #endif
 
 void arch_other_world_init(void)
@@ -181,3 +185,28 @@ struct ffa_value arch_other_world_call(struct ffa_value args)
 {
 	return smc_ffa_call(args);
 }
+
+#if SECURE_WORLD == 1
+
+ffa_vm_id_t arch_other_world_get_ffa_id(void)
+{
+	return physical_ffa_id;
+}
+
+void arch_other_world_init_ffa_id(void)
+{
+	struct ffa_value res =
+		smc_ffa_call((struct ffa_value){.func = FFA_ID_GET_32});
+
+	if (res.func != FFA_SUCCESS_32) {
+		dlog_error("%s Failed to get SPMC's FFA-ID from SPMD.\n",
+			   __func__);
+		physical_ffa_id = HF_INVALID_VM_ID;
+		return;
+	}
+	physical_ffa_id = res.arg2 & 0xFFFF;
+
+	CHECK(physical_ffa_id == HF_TEE_VM_ID);
+}
+
+#endif
diff --git a/src/arch/aarch64/hypervisor/psci_handler.c b/src/arch/aarch64/hypervisor/psci_handler.c
index f89a00b..b323faa 100644
--- a/src/arch/aarch64/hypervisor/psci_handler.c
+++ b/src/arch/aarch64/hypervisor/psci_handler.c
@@ -10,10 +10,13 @@
 
 #include <stdint.h>
 
+#include "hf/arch/other_world.h"
 #include "hf/arch/plat/psci.h"
+#include "hf/arch/spmd_helpers.h"
 #include "hf/arch/types.h"
 
 #include "hf/api.h"
+#include "hf/boot_params.h"
 #include "hf/cpu.h"
 #include "hf/dlog.h"
 #include "hf/ffa.h"
@@ -53,6 +56,41 @@ void arch_one_time_init(void)
 	}
 #else
 	el3_psci_version = PSCI_VERSION_1_1;
+
+	arch_other_world_init_ffa_id();
+#endif
+}
+
+/**
+ * Register secondary physical core entry points to the SPMD.
+ */
+void arch_psci_secondary_core_init(const struct boot_params *params)
+{
+#if SECURE_WORLD == 1
+	struct ffa_value res;
+
+	for (uint32_t count = 0; count < params->cpu_count; count++) {
+		uint32_t id = params->cpu_ids[count];
+		struct cpu *cpu = cpu_find(id);
+		const ffa_vm_id_t ffa_id = arch_other_world_get_ffa_id();
+
+		res = smc_ffa_call((struct ffa_value){
+			.func = FFA_MSG_SEND_DIRECT_REQ_32,
+			.arg1 = ((uint64_t)ffa_id << 16) | SPMD_ID,
+			.arg3 = SPMD_DIRECT_MSG_SET_ENTRY_POINT,
+			.arg4 = params->cpu_ids[count],
+			.arg5 = (uintreg_t)&cpu_entry,
+			.arg6 = (uintreg_t)cpu});
+
+		if (res.func != FFA_SUCCESS_32) {
+			dlog_warning(
+				"%s Failed to initialize secondary core ID: "
+				"%u\n",
+				__func__, id);
+		}
+
+		dlog_verbose("SPMD EP register returned %#x\n", res.func);
+	}
 #endif
 }
 
@@ -353,11 +391,13 @@ bool psci_secondary_vm_handler(struct vcpu *vcpu, uint32_t func, uintreg_t arg0,
 
 		if (vcpu_secondary_reset_and_start(
 			    target_vcpu, entry_point_address, context_id)) {
+#if SECURE_WORLD == 0
 			/*
 			 * Tell the scheduler that it can start running the new
 			 * vCPU now.
 			 */
 			*next = api_wake_up(vcpu, target_vcpu);
+#endif
 			*ret = PSCI_RETURN_SUCCESS;
 		} else {
 			*ret = PSCI_ERROR_ALREADY_ON;
diff --git a/src/arch/aarch64/inc/hf/arch/spmd_helpers.h b/src/arch/aarch64/inc/hf/arch/spmd_helpers.h
new file mode 100644
index 0000000..6e11c36
--- /dev/null
+++ b/src/arch/aarch64/inc/hf/arch/spmd_helpers.h
@@ -0,0 +1,15 @@
+/*
+ * Copyright 2020 The Hafnium Authors.
+ *
+ * Use of this source code is governed by a BSD-style
+ * license that can be found in the LICENSE file or at
+ * https://opensource.org/licenses/BSD-3-Clause.
+ */
+
+#define SPMD_ID 0xFFFF
+#define SPMD_DIRECT_MSG_SET_ENTRY_POINT 1
+
+/**
+ * Get SPMC ID stored in the manifest.
+ */
+ffa_vm_id_t get_ffa_id(void);
diff --git a/src/cpu.c b/src/cpu.c
index 0a3fc6f..0e0ee9a 100644
--- a/src/cpu.c
+++ b/src/cpu.c
@@ -138,7 +138,7 @@ bool cpu_on(struct cpu *c, ipaddr_t entry, uintreg_t arg)
 	c->is_on = true;
 	sl_unlock(&c->lock);
 
-	if (!prev) {
+	if (!prev && vm_id_is_current_world(HF_PRIMARY_VM_ID)) {
 		struct vm *vm = vm_find(HF_PRIMARY_VM_ID);
 		struct vcpu *vcpu = vm_get_vcpu(vm, cpu_index(c));
 		struct vcpu_locked vcpu_locked;
diff --git a/src/init.c b/src/init.c
index a5b48ab..0121213 100644
--- a/src/init.c
+++ b/src/init.c
@@ -146,6 +146,8 @@ void one_time_init(void)
 
 	cpu_module_init(params.cpu_ids, params.cpu_count);
 
+	arch_psci_secondary_core_init(&params);
+
 	/* Load all VMs. */
 	update.reserved_ranges_count = 0;
 	if (!load_vms(mm_stage1_locked, &manifest, &cpio, &params, &update,
diff --git a/src/load.c b/src/load.c
index 660d77c..7accc65 100644
--- a/src/load.c
+++ b/src/load.c
@@ -286,6 +286,9 @@ static bool load_primary(struct mm_stage1_locked stage1_locked,
 	dlog_info("Loaded primary VM with %u vCPUs, entry at %#x.\n",
 		  vm->vcpu_count, pa_addr(primary_begin));
 
+	/* Mark the primary to be the first booted VM */
+	vm_update_boot(vm);
+
 	vcpu_locked = vcpu_lock(vm_get_vcpu(vm, 0));
 	vcpu_on(vcpu_locked, primary_entry, params->kernel_arg);
 	vcpu_unlock(&vcpu_locked);
diff --git a/src/main.c b/src/main.c
index 5f30aac..3cc932e 100644
--- a/src/main.c
+++ b/src/main.c
@@ -15,14 +15,16 @@
  */
 struct vcpu *cpu_main(struct cpu *c)
 {
+	struct vm *first_boot;
 	struct vcpu *vcpu;
-#if SECURE_WORLD == 1
-	struct vm *first_boot = vm_get_first_boot();
+
+	/*
+	 * This returns the PVM in the normal worls and the first
+	 * booted Secure Partition in the secure world.
+	 */
+	first_boot = vm_get_first_boot();
 
 	vcpu = vm_get_vcpu(first_boot, cpu_index(c));
-#else
-	vcpu = vm_get_vcpu(vm_find(HF_PRIMARY_VM_ID), cpu_index(c));
-#endif
 
 	vcpu->cpu = c;
 
-- 
2.29.2

