Upstream-Status: Pending [https://github.com/jenswi-linaro/optee_client/commit/7a67f8b7681ecf3abb5b09e5e320857d16f4a7e6]
Signed-off-by: Arunachalam Ganapathy <arunachalam.ganapathy@arm.com>

From 7a67f8b7681ecf3abb5b09e5e320857d16f4a7e6 Mon Sep 17 00:00:00 2001
From: Jens Wiklander <jens.wiklander@linaro.org>
Date: Mon, 16 Nov 2020 17:34:07 +0100
Subject: [PATCH 2/2] Allocate page aligned shared memory buffers

Allocate page aligned shared memory buffer guarantee that each shared
memory buffer doesn't accidentally share a page of memory or they may
become aliased when mapped in secure world. This is normally not a big
problem but may make it a bit harder to track down buffer overruns in
shared memory buffers.

In a post Arm v8.4 architecture with FF-A [1] there's trouble since it's
not permitted to share the same physical page twice.

Signed-off-by: Jens Wiklander <jens.wiklander@linaro.org>
---
 libteec/src/tee_client_api.c        | 14 ++++++++++++--
 tee-supplicant/src/tee_supplicant.c | 12 +++++++++++-
 2 files changed, 23 insertions(+), 3 deletions(-)

diff --git a/libteec/src/tee_client_api.c b/libteec/src/tee_client_api.c
index b8ccdfa..676d373 100644
--- a/libteec/src/tee_client_api.c
+++ b/libteec/src/tee_client_api.c
@@ -74,6 +74,16 @@ static void teec_mutex_unlock(pthread_mutex_t *mu)
 	pthread_mutex_unlock(mu);
 }
 
+static void *teec_paged_aligned_alloc(size_t sz)
+{
+	void *p = NULL;
+
+	if (!posix_memalign(&p, sysconf(_SC_PAGESIZE), sz))
+		return p;
+
+	return NULL;
+}
+
 static int teec_open_dev(const char *devname, const char *capabilities,
 			 uint32_t *gen_caps)
 {
@@ -790,7 +800,7 @@ TEEC_Result TEEC_RegisterSharedMemory(TEEC_Context *ctx, TEEC_SharedMemory *shm)
 		 * we're not making matters worse by trying to allocate and
 		 * register a shadow buffer before giving up.
 		 */
-		shm->shadow_buffer = malloc(s);
+		shm->shadow_buffer = teec_paged_aligned_alloc(s);
 		if (!shm->shadow_buffer)
 			return TEEC_ERROR_OUT_OF_MEMORY;
 		fd = teec_shm_register(ctx->fd, shm->shadow_buffer, s,
@@ -873,7 +883,7 @@ TEEC_Result TEEC_AllocateSharedMemory(TEEC_Context *ctx, TEEC_SharedMemory *shm)
 		s = 8;
 
 	if (ctx->reg_mem) {
-		shm->buffer = malloc(s);
+		shm->buffer = teec_paged_aligned_alloc(s);
 		if (!shm->buffer)
 			return TEEC_ERROR_OUT_OF_MEMORY;
 
diff --git a/tee-supplicant/src/tee_supplicant.c b/tee-supplicant/src/tee_supplicant.c
index 94cf382..d590c2b 100644
--- a/tee-supplicant/src/tee_supplicant.c
+++ b/tee-supplicant/src/tee_supplicant.c
@@ -127,6 +127,16 @@ static size_t num_waiters_dec(struct thread_arg *arg)
 	return ret;
 }
 
+static void *paged_aligned_alloc(size_t sz)
+{
+	void *p = NULL;
+
+	if (!posix_memalign(&p, sysconf(_SC_PAGESIZE), sz))
+		return p;
+
+	return NULL;
+}
+
 static int get_value(size_t num_params, struct tee_ioctl_param *params,
 		     const uint32_t idx, struct param_value **value)
 {
@@ -336,7 +346,7 @@ static struct tee_shm *register_local_shm(int fd, size_t size)
 
 	memset(&data, 0, sizeof(data));
 
-	buf = malloc(size);
+	buf = paged_aligned_alloc(size);
 	if (!buf)
 		return NULL;
 
-- 
2.26.2

