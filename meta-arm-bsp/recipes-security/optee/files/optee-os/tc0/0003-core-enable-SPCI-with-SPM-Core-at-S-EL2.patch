Upstream-Status: Pending [https://github.com/jenswi-linaro/optee_os/commit/80f0ec4ba2af33584e99e917fa165b77028a511f]
Signed-off-by: Arunachalam Ganapathy <arunachalam.ganapathy@arm.com>

From 80f0ec4ba2af33584e99e917fa165b77028a511f Mon Sep 17 00:00:00 2001
From: Marc Bonnici <marc.bonnici@arm.com>
Date: Fri, 5 Jun 2020 13:47:40 +0100
Subject: [PATCH 3/3] core: enable SPCI with SPM Core at S-EL2

This is a port of a pre-exisiting patch to support the case where
the SPM Core is implementation at S-EL2, that is, in a secure hypervisor.
This configuration is also know as "S-EL2 SPMC" in the FFA specification.

Compile with CFG_CORE_SEL2_SPMC=y

Note that this is an experimental feature, ABIs etc may have
incompatible changes.

Sqaushed in:
	core: Update cookie to uint64 in S-EL2 code

	As part of the update to FF-A 1.0 the globally
	unique handle to identify a shared memory object is now 64
	bits wide instead of 32. This commit updates the
	remaining usage of 32 bit values.

	core: Remove page count from S-EL2 code

	The page count field has been dropped from upstream OP-TEE to
	accommodate using a 64 bit handle in the same size message param struct,
	therefore update our implementation to support this.

	core: Update remaining FF-A structures to EAC

	Update relinquish data structures and ABI invocations to the FFA
	EAC spec
---
 core/arch/arm/arm.mk                   |   7 ++
 core/arch/arm/include/kernel/thread.h  |   6 +
 core/arch/arm/include/mm/mobj.h        |   6 +
 core/arch/arm/kernel/thread_spmc.c     | 164 ++++++++++++++++++++++++-
 core/arch/arm/kernel/thread_spmc_a64.S |   3 +-
 core/arch/arm/mm/mobj_ffa.c            | 104 +++++++++++-----
 core/arch/arm/plat-vexpress/conf.mk    |   5 +
 7 files changed, 260 insertions(+), 35 deletions(-)

diff --git a/core/arch/arm/arm.mk b/core/arch/arm/arm.mk
index f495f3c9..7c5e8fb0 100644
--- a/core/arch/arm/arm.mk
+++ b/core/arch/arm/arm.mk
@@ -97,6 +97,13 @@ endif
 # changes
 ifeq ($(CFG_CORE_SEL1_SPMC),y)
 $(call force,CFG_CORE_FFA,y)
+$(call force,CFG_CORE_SEL2_SPMC,n)
+endif
+# SPMC configuration "S-EL2 SPMC" where SPM Core is implemented at S-EL2,
+# that is, the hypervisor sandboxing OP-TEE
+ifeq ($(CFG_CORE_SEL2_SPMC),y)
+$(call force,CFG_CORE_FFA,y)
+$(call force,CFG_CORE_SEL1_SPMC,n)
 endif
 
 # Unmaps all kernel mode code except the code needed to take exceptions
diff --git a/core/arch/arm/include/kernel/thread.h b/core/arch/arm/include/kernel/thread.h
index 4f0520e9..95f48589 100644
--- a/core/arch/arm/include/kernel/thread.h
+++ b/core/arch/arm/include/kernel/thread.h
@@ -759,6 +759,12 @@ enum thread_shm_cache_user {
 void *thread_rpc_shm_cache_alloc(enum thread_shm_cache_user user,
 				 enum thread_shm_type shm_type,
 				 size_t size, struct mobj **mobj);
+
+#if defined(CFG_CORE_SEL2_SPMC)
+struct mobj_ffa *thread_spmc_populate_mobj_from_rx(uint64_t cookie);
+void thread_spmc_relinquish(uint64_t memory_region_handle);
+#endif
+
 #endif /*__ASSEMBLER__*/
 
 #endif /*KERNEL_THREAD_H*/
diff --git a/core/arch/arm/include/mm/mobj.h b/core/arch/arm/include/mm/mobj.h
index 2b9bd90c..3f820666 100644
--- a/core/arch/arm/include/mm/mobj.h
+++ b/core/arch/arm/include/mm/mobj.h
@@ -216,6 +216,12 @@ struct mobj_ffa *mobj_ffa_sel1_spmc_new(unsigned int num_pages);
 void mobj_ffa_sel1_spmc_delete(struct mobj_ffa *mobj);
 TEE_Result mobj_ffa_sel1_spmc_reclaim(uint64_t cookie);
 #endif
+#ifdef CFG_CORE_SEL2_SPMC
+struct mobj_ffa *mobj_ffa_sel2_spmc_new(uint64_t cookie,
+                                        unsigned int num_pages);
+void mobj_ffa_sel2_spmc_delete(struct mobj_ffa *mobj);
+#endif
+
 uint64_t mobj_ffa_get_cookie(struct mobj_ffa *mobj);
 TEE_Result mobj_ffa_add_pages_at(struct mobj_ffa *mobj, unsigned int *idx,
 				 paddr_t pa, unsigned int num_pages);
diff --git a/core/arch/arm/kernel/thread_spmc.c b/core/arch/arm/kernel/thread_spmc.c
index 16f3bbe1..3d7dc035 100644
--- a/core/arch/arm/kernel/thread_spmc.c
+++ b/core/arch/arm/kernel/thread_spmc.c
@@ -7,6 +7,7 @@
 #include <assert.h>
 #include <ffa.h>
 #include <io.h>
+#include <initcall.h>
 #include <kernel/interrupt.h>
 #include <kernel/panic.h>
 #include <kernel/spinlock.h>
@@ -88,6 +89,18 @@ struct mem_frag_state {
 
 static uint16_t my_sp_id = 0x8001;
 
+
+/* Table 149: FFA_MEM_RELINQUISH. */
+struct ffa_relinquish_descriptor {
+       uint64_t handle;
+       uint32_t flags;
+       uint32_t endpoint_count;
+       uint16_t endpoint_id_array[];
+};
+
+/* Our VM ID is 0x8001, non-secure VM ID 0x0001 */
+const uint32_t thread_spmc_target_info = 0x80010001;
+
 /*
  * If @rxtx_size is 0 RX/TX buffers are not mapped or initialized.
  *
@@ -101,8 +114,16 @@ static uint16_t my_sp_id = 0x8001;
  * these buffers so we must always be careful when reading. while we hold
  * the lock.
  */
+
+#ifdef CFG_CORE_SEL2_SPMC
+static uint8_t rx_buf[SMALL_PAGE_SIZE] __aligned(SMALL_PAGE_SIZE);
+static uint8_t tx_buf[SMALL_PAGE_SIZE] __aligned(SMALL_PAGE_SIZE);
+#else
 static void *rx_buf;
 static void *tx_buf;
+#endif
+
+
 static unsigned int rxtx_size;
 static unsigned int rxtx_spinlock;
 static bool tx_buf_is_mine;
@@ -127,6 +148,28 @@ static void set_args(struct thread_smc_args *args, uint32_t fid,
 					  .a5 = w5, };
 }
 
+static int __maybe_unused
+set_pages(struct constituent_address_range *regions, unsigned int num_regions,
+	  unsigned int num_pages, struct mobj_ffa *mf)
+{
+	unsigned int n = 0;
+	unsigned int idx = 0;
+
+	for (n = 0; n < num_regions; n++) {
+		unsigned int page_count = READ_ONCE(regions[n].page_count);
+		uint64_t addr = READ_ONCE(regions[n].address);
+
+		if (mobj_ffa_add_pages_at(mf, &idx, addr, page_count))
+			return FFA_INVALID_PARAMETERS;
+	}
+
+	if (idx != num_pages)
+		return FFA_INVALID_PARAMETERS;
+
+	return 0;
+}
+
+
 static void handle_version(struct thread_smc_args *args)
 {
 	/*
@@ -188,6 +231,7 @@ static void handle_features(struct thread_smc_args *args)
 		 FFA_PARAM_MBZ, FFA_PARAM_MBZ, FFA_PARAM_MBZ);
 }
 
+#ifdef CFG_CORE_SEL1_SPMC
 static int map_buf(paddr_t pa, unsigned int sz, void **va_ret)
 {
 	tee_mm_entry_t *mm = NULL;
@@ -293,6 +337,7 @@ out:
 	set_args(args, ret_fid, FFA_PARAM_MBZ, rc,
 		 FFA_PARAM_MBZ, FFA_PARAM_MBZ, FFA_PARAM_MBZ);
 }
+#endif
 
 static void handle_rx_release(struct thread_smc_args *args)
 {
@@ -408,6 +453,7 @@ static void handle_blocking_call(struct thread_smc_args *args)
 	}
 }
 
+#if CFG_CORE_SEL1_SPMC
 static int get_acc_perms(struct mem_accsess_descr *mem_acc,
 			 unsigned int num_mem_accs, uint8_t *acc_perms,
 			 unsigned int *region_offs)
@@ -531,7 +577,11 @@ static int add_mem_share_frag(struct mem_frag_state *s, void *buf, size_t flen)
 
 	SLIST_REMOVE(&frag_state_head, s, mem_frag_state, link);
 	if (rc < 0)
+#ifdef CFG_CORE_SEL2_SPMC
+		mobj_ffa_sel2_spmc_delete(s->share.mf);
+#else
 		mobj_ffa_sel1_spmc_delete(s->share.mf);
+#endif
 	else
 		mobj_ffa_push_to_inactive(s->share.mf);
 	free(s);
@@ -559,8 +609,8 @@ static int add_mem_share(tee_mm_entry_t *mm, void *buf, size_t blen,
 			 sizeof(struct constituent_address_range), &n) ||
 	    ADD_OVERFLOW(n, addr_range_offs, &n) || n > blen)
 		return FFA_INVALID_PARAMETERS;
-
 	share.mf = mobj_ffa_sel1_spmc_new(share.page_count);
+
 	if (!share.mf)
 		return FFA_NO_MEMORY;
 
@@ -601,6 +651,7 @@ static int add_mem_share(tee_mm_entry_t *mm, void *buf, size_t blen,
 	return 0;
 err:
 	mobj_ffa_sel1_spmc_delete(share.mf);
+
 	return rc;
 }
 
@@ -809,6 +860,7 @@ static void handle_mem_reclaim(struct thread_smc_args *args)
 out:
 	set_args(args, ret_fid, ret_val, 0, 0, 0, 0);
 }
+#endif
 
 /* Only called from assembly */
 void thread_spmc_msg_recv(struct thread_smc_args *args);
@@ -822,6 +874,7 @@ void thread_spmc_msg_recv(struct thread_smc_args *args)
 	case FFA_FEATURES:
 		handle_features(args);
 		break;
+#if CFG_CORE_SEL1_SPMC
 #ifdef ARM64
 	case FFA_RXTX_MAP_64:
 #endif
@@ -831,6 +884,7 @@ void thread_spmc_msg_recv(struct thread_smc_args *args)
 	case FFA_RXTX_UNMAP:
 		handle_rxtx_unmap(args);
 		break;
+#endif
 	case FFA_RX_RELEASE:
 		handle_rx_release(args);
 		break;
@@ -847,6 +901,7 @@ void thread_spmc_msg_recv(struct thread_smc_args *args)
 		else
 			handle_blocking_call(args);
 		break;
+#if CFG_CORE_SEL1_SPMC
 #ifdef ARM64
 	case FFA_MEM_SHARE_64:
 #endif
@@ -859,6 +914,7 @@ void thread_spmc_msg_recv(struct thread_smc_args *args)
 	case FFA_MEM_FRAG_TX:
 		handle_mem_frag_tx(args);
 		break;
+#endif
 	default:
 		EMSG("Unhandled FFA function ID %#"PRIx32, (uint32_t)args->a0);
 		set_args(args, FFA_ERROR, FFA_PARAM_MBZ, FFA_NOT_SUPPORTED,
@@ -1185,3 +1241,109 @@ void thread_rpc_free_global_payload(struct mobj *mobj __unused)
 
 	assert(!cant_happen);
 }
+
+#ifdef CFG_CORE_SEL2_SPMC
+static void spmc_rxtx_map(void)
+{
+	struct thread_smc_args args = {
+		.a0 = FFA_RXTX_MAP_64,
+		.a1 = (vaddr_t)tx_buf,
+		.a2 = (vaddr_t)rx_buf,
+		.a3 = 1,
+	};
+
+	thread_smccc(&args);
+	if (args.a0 == FFA_ERROR) {
+		EMSG("ERROR rxtx map failed with error %ld\n", args.a2);
+		panic();
+	}
+}
+
+static struct mem_transaction_descr *spmc_retrieve_req(uint64_t cookie)
+{
+	struct mem_transaction_descr *retrieve_region = (void *)tx_buf;
+
+	struct thread_smc_args args = {
+		.a0 = FFA_MEM_RETRIEVE_REQ_64,
+		.a1 =   sizeof(*retrieve_region),  	// Total Length
+		.a2 =	sizeof(*retrieve_region),	// Frag Length == Total length
+		.a3 =	0,				// Address, Using TX -> MBZ
+		.a4 =   0 				// Using TX -> MBZ
+	};
+
+	/* TODO pass all the information required by the spec */
+	memset(retrieve_region, 0, sizeof(*retrieve_region));
+	retrieve_region->global_handle = cookie;
+
+	thread_smccc(&args);
+	if (args.a0 == FFA_ERROR /*TODO != FFA_MEM_RETRIEVE_RESP_64 */) {
+		EMSG("Failed to fetch cookie %#"PRIx64, cookie);
+		return NULL;
+	}
+
+	return (void *)rx_buf;
+}
+
+void thread_spmc_relinquish(uint64_t cookie)
+{
+	struct ffa_relinquish_descriptor *relinquish_desc = (void *)tx_buf;
+
+	struct thread_smc_args args = {
+		.a0 = FFA_MEM_RELINQUISH,
+	};
+
+	memset(relinquish_desc, 0, sizeof(*relinquish_desc));
+	relinquish_desc->handle = cookie;
+	relinquish_desc->flags = 0;
+	/* TODO: Add endpoint details. */
+	thread_smccc(&args);
+	if (args.a0 != FFA_SUCCESS_32)
+		EMSG("Failed to relinquish cookie %#"PRIx64, cookie);
+}
+
+struct mobj_ffa *thread_spmc_populate_mobj_from_rx(uint64_t cookie)
+{
+	struct mem_transaction_descr *retrieve_desc;
+	struct mem_region_descr *descr;
+	struct mobj_ffa *mf;
+	uint32_t num_pages;
+
+
+	/* XXX Support single mem_region. */
+	retrieve_desc = spmc_retrieve_req(cookie);
+
+	if (!retrieve_desc) {
+	    EMSG("Failed to retrieve cookie from rx buffer %#"PRIx64, cookie);
+	    return NULL;
+	}
+
+	descr = (struct mem_region_descr *)
+			((uint8_t *)retrieve_desc +
+				retrieve_desc->mem_accsess_descr_array[0].mem_region_offs);
+
+	num_pages = descr->total_page_count;
+	mf = mobj_ffa_sel2_spmc_new(cookie, num_pages);
+
+	if (!mf)
+		return NULL;
+
+	if (set_pages(descr->address_range_array,
+				  descr->address_range_count,
+				  num_pages, mf)) {
+		mobj_ffa_sel2_spmc_delete(mf);
+		return NULL;
+
+	}
+
+	return mf;
+}
+
+static TEE_Result spmc_init(void)
+{
+	spmc_rxtx_map();
+
+	return TEE_SUCCESS;
+}
+service_init(spmc_init);
+
+#endif /*CFG_CORE_SEL2_SPMC*/
diff --git a/core/arch/arm/kernel/thread_spmc_a64.S b/core/arch/arm/kernel/thread_spmc_a64.S
index 3d57da4d..66f9d0b4 100644
--- a/core/arch/arm/kernel/thread_spmc_a64.S
+++ b/core/arch/arm/kernel/thread_spmc_a64.S
@@ -17,7 +17,8 @@
 
 FUNC thread_ffa_msg_wait , :
 	mov_imm	x0, FFA_MSG_WAIT		/* FID */
-	mov	x1, #FFA_TARGET_INFO_MBZ	/* Target info MBZ */
+	adr     x1, thread_spmc_target_info
+	ldr     w1, [x1]
 	mov	x2, #FFA_PARAM_MBZ		/* Param MBZ */
 	mov	x3, #FFA_PARAM_MBZ		/* Param MBZ */
 	mov	x4, #FFA_PARAM_MBZ		/* Param MBZ */
diff --git a/core/arch/arm/mm/mobj_ffa.c b/core/arch/arm/mm/mobj_ffa.c
index fd5e66ea..e2c585a2 100644
--- a/core/arch/arm/mm/mobj_ffa.c
+++ b/core/arch/arm/mm/mobj_ffa.c
@@ -19,8 +19,10 @@ struct mobj_ffa {
 	tee_mm_entry_t *mm;
 	struct refcount mapcount;
 	uint16_t page_offset;
+#ifdef CFG_CORE_SEL1_SPMC
 	bool registered_by_cookie;
 	bool unregistered_by_cookie;
+#endif
 	paddr_t pages[];
 };
 
@@ -186,6 +188,24 @@ void mobj_ffa_sel1_spmc_delete(struct mobj_ffa *mf)
 }
 #endif /*CFG_CORE_SEL1_SPMC*/
 
+#ifdef CFG_CORE_SEL2_SPMC
+struct mobj_ffa *mobj_ffa_sel2_spmc_new(uint64_t cookie,
+					unsigned int num_pages)
+{
+	struct mobj_ffa *mf = NULL;
+
+	mf = ffa_new(num_pages);
+	if (mf)
+		mf->cookie = cookie;
+	return mf;
+}
+
+void mobj_ffa_sel2_spmc_delete(struct mobj_ffa *mf)
+{
+	free(mf);
+}
+#endif /*CFG_CORE_SEL2_SPMC*/
+
 TEE_Result mobj_ffa_add_pages_at(struct mobj_ffa *mf, unsigned int *idx,
 				 paddr_t pa, unsigned int num_pages)
 {
@@ -234,7 +254,9 @@ static void unmap_helper(struct mobj_ffa *mf)
 	}
 }
 
-TEE_Result mobj_ffa_unregister_by_cookie(uint64_t cookie)
+
+#ifdef CFG_CORE_SEL1_SPMC
+TEE_Result mobj_ffa_sel1_spmc_reclaim(uint64_t cookie)
 {
 	TEE_Result res = TEE_SUCCESS;
 	struct mobj_ffa *mf = NULL;
@@ -244,7 +266,7 @@ TEE_Result mobj_ffa_unregister_by_cookie(uint64_t cookie)
 	mf = find_in_list(&shm_head, cmp_cookie, cookie);
 	/*
 	 * If the mobj is found here it's still active and cannot be
-	 * unregistered.
+	 * reclaimed.
 	 */
 	if (mf) {
 		DMSG("cookie %#"PRIx64" busy refc %u",
@@ -252,24 +274,34 @@ TEE_Result mobj_ffa_unregister_by_cookie(uint64_t cookie)
 		res = TEE_ERROR_BUSY;
 		goto out;
 	}
+
 	mf = find_in_list(&shm_inactive_head, cmp_cookie, cookie);
+	if (!mf) {
+		res = TEE_ERROR_ITEM_NOT_FOUND;
+		goto out;
+	}
 	/*
-	 * If the mobj isn't found or if it already has been unregistered.
+	 * If the mobj has been registered via mobj_ffa_get_by_cookie()
+	 * but not unregistered yet with mobj_ffa_unregister_by_cookie().
 	 */
-	if (!mf || mf->unregistered_by_cookie) {
-		res = TEE_ERROR_ITEM_NOT_FOUND;
+	if (mf->registered_by_cookie && !mf->unregistered_by_cookie) {
+		DMSG("cookie %#"PRIx64" busy", cookie);
+		res = TEE_ERROR_BUSY;
 		goto out;
 	}
-	mf->unregistered_by_cookie = true;
-	res = TEE_SUCCESS;
 
+	if (!pop_from_list(&shm_inactive_head, cmp_ptr, (vaddr_t)mf))
+		panic();
+	res = TEE_SUCCESS;
 out:
 	cpu_spin_unlock_xrestore(&shm_lock, exceptions);
+	if (!res)
+		mobj_ffa_sel1_spmc_delete(mf);
 	return res;
 }
+#endif /*CFG_CORE_SEL1_SPMC*/
 
-#ifdef CFG_CORE_SEL1_SPMC
-TEE_Result mobj_ffa_sel1_spmc_reclaim(uint64_t cookie)
+TEE_Result mobj_ffa_unregister_by_cookie(uint64_t cookie)
 {
 	TEE_Result res = TEE_SUCCESS;
 	struct mobj_ffa *mf = NULL;
@@ -279,7 +311,7 @@ TEE_Result mobj_ffa_sel1_spmc_reclaim(uint64_t cookie)
 	mf = find_in_list(&shm_head, cmp_cookie, cookie);
 	/*
 	 * If the mobj is found here it's still active and cannot be
-	 * reclaimed.
+	 * unregistered.
 	 */
 	if (mf) {
 		DMSG("cookie %#"PRIx64" busy refc %u",
@@ -287,43 +319,42 @@ TEE_Result mobj_ffa_sel1_spmc_reclaim(uint64_t cookie)
 		res = TEE_ERROR_BUSY;
 		goto out;
 	}
-
 	mf = find_in_list(&shm_inactive_head, cmp_cookie, cookie);
-	if (!mf) {
-		res = TEE_ERROR_ITEM_NOT_FOUND;
-		goto out;
-	}
 	/*
-	 * If the mobj has been registered via mobj_ffa_get_by_cookie()
-	 * but not unregistered yet with mobj_ffa_unregister_by_cookie().
+	 * If the mobj isn't found or if it already has been unregistered.
 	 */
-	if (mf->registered_by_cookie && !mf->unregistered_by_cookie) {
-		DMSG("cookie %#"PRIx64" busy", cookie);
-		res = TEE_ERROR_BUSY;
+#ifdef CFG_CORE_SEL2_SPMC
+	if (!mf) {
+#else
+	if (!mf || mf->unregistered_by_cookie) {
+#endif
+		res = TEE_ERROR_ITEM_NOT_FOUND;
 		goto out;
 	}
 
-	if (!pop_from_list(&shm_inactive_head, cmp_ptr, (vaddr_t)mf))
-		panic();
+
+#ifdef CFG_CORE_SEL2_SPMC
+	mf = pop_from_list(&shm_inactive_head, cmp_cookie, cookie);
+	mobj_ffa_sel2_spmc_delete(mf);
+	thread_spmc_relinquish(cookie);
+#else
+	mf->unregistered_by_cookie = true;
+#endif
 	res = TEE_SUCCESS;
+
 out:
 	cpu_spin_unlock_xrestore(&shm_lock, exceptions);
-	if (!res)
-		mobj_ffa_sel1_spmc_delete(mf);
 	return res;
 }
-#endif /*CFG_CORE_SEL1_SPMC*/
 
-struct mobj *mobj_ffa_get_by_cookie(uint64_t cookie, unsigned int internal_offs)
+struct mobj *mobj_ffa_get_by_cookie(uint64_t cookie,
+				    unsigned int internal_offs)
 {
 	struct mobj_ffa *mf = NULL;
 	uint32_t exceptions = 0;
-
 	if (internal_offs >= SMALL_PAGE_SIZE)
 		return NULL;
-
 	exceptions = cpu_spin_lock_xsave(&shm_lock);
-
 	mf = find_in_list(&shm_head, cmp_cookie, cookie);
 	if (mf) {
 		if (mf->page_offset == internal_offs) {
@@ -345,9 +376,19 @@ struct mobj *mobj_ffa_get_by_cookie(uint64_t cookie, unsigned int internal_offs)
 		}
 	} else {
 		mf = pop_from_list(&shm_inactive_head, cmp_cookie, cookie);
+#if defined(CFG_CORE_SEL2_SPMC)
+		/* Try to retrieve it from the SPM at S-EL2 */
+		if (mf)
+			DMSG("cookie %#"PRIx64" resurrecting", cookie);
+		if (!mf)
+			EMSG("Populating mobj from rx buffer\n");
+			mf = thread_spmc_populate_mobj_from_rx(cookie);
+#endif
 		if (mf) {
+#if defined(CFG_CORE_SEL1_SPMC)
 			mf->unregistered_by_cookie = false;
 			mf->registered_by_cookie = true;
+#endif
 			assert(refcount_val(&mf->mobj.refc) == 0);
 			refcount_set(&mf->mobj.refc, 1);
 			refcount_set(&mf->mapcount, 0);
@@ -358,15 +399,12 @@ struct mobj *mobj_ffa_get_by_cookie(uint64_t cookie, unsigned int internal_offs)
 			SLIST_INSERT_HEAD(&shm_head, mf, link);
 		}
 	}
-
 	cpu_spin_unlock_xrestore(&shm_lock, exceptions);
-
 	if (!mf) {
 		EMSG("Failed to get cookie %#"PRIx64" internal_offs %#x",
-		     cookie, internal_offs);
+			cookie, internal_offs);
 		return NULL;
 	}
-
 	return &mf->mobj;
 }
 
diff --git a/core/arch/arm/plat-vexpress/conf.mk b/core/arch/arm/plat-vexpress/conf.mk
index 26b9f51e..dd6530a6 100644
--- a/core/arch/arm/plat-vexpress/conf.mk
+++ b/core/arch/arm/plat-vexpress/conf.mk
@@ -58,8 +58,13 @@ CFG_WITH_STATS ?= y
 
 ifeq ($(PLATFORM_FLAVOR),fvp)
 CFG_TEE_CORE_NB_CORE = 8
+ifeq ($(CFG_CORE_SEL2_SPMC),y)
+CFG_TZDRAM_START ?= 0x06280000
+CFG_TZDRAM_SIZE  ?= 0x01D80000
+else
 CFG_TZDRAM_START ?= 0x06000000
 CFG_TZDRAM_SIZE  ?= 0x02000000
+endif
 CFG_SHMEM_START  ?= 0x83000000
 CFG_SHMEM_SIZE   ?= 0x00200000
 # DRAM1 is defined above 4G
-- 
2.26.2

