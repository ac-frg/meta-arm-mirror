Upstream-Status: Pending [Not submitted to upstream yet]
Signed-off-by: Arunachalam Ganapathy <arunachalam.ganapathy@arm.com>

From 85110aaf32b6d3b19fdca301f7a07a4683825802 Mon Sep 17 00:00:00 2001
From: Olivier Deprez <olivier.deprez@arm.com>
Date: Thu, 3 Dec 2020 17:33:09 +0100
Subject: [PATCH 3/3] WIP OP-TEE SP use CNTVCT in place of CNTVCT

The SPMC forbids access to the physical counter and Secure Partitions
shall rather access the virtual counter (for which virtual offset is
set to 0). More information at [1].

[1] https://lists.trustedfirmware.org/pipermail/hafnium/2020-December/000092.html

Change-Id: Ifab083921fa12154cafc31bd80ce91fa8da0db82
Signed-off-by: Olivier Deprez <olivier.deprez@arm.com>
---
 core/arch/arm/include/arm64.h              | 2 +-
 core/arch/arm/include/kernel/delay.h       | 4 ++--
 core/arch/arm/kernel/arm32_sysreg.txt      | 2 +-
 core/arch/arm/kernel/tee_time_arm_cntpct.c | 4 ++--
 core/kernel/tee_ta_manager.c               | 4 ++--
 lib/libutee/arch/arm/arm32_user_sysreg.txt | 2 +-
 lib/libutee/include/arm64_user_sysreg.h    | 2 +-
 lib/libutils/ext/ftrace/ftrace.c           | 6 +++---
 8 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/core/arch/arm/include/arm64.h b/core/arch/arm/include/arm64.h
index 40a6b113..46c5431f 100644
--- a/core/arch/arm/include/arm64.h
+++ b/core/arch/arm/include/arm64.h
@@ -322,7 +322,7 @@ DEFINE_U32_REG_READ_FUNC(sctlr_el1)
 
 /* ARM Generic timer functions */
 DEFINE_REG_READ_FUNC_(cntfrq, uint32_t, cntfrq_el0)
-DEFINE_REG_READ_FUNC_(cntpct, uint64_t, cntpct_el0)
+DEFINE_REG_READ_FUNC_(cntvct, uint64_t, cntvct_el0)
 DEFINE_REG_READ_FUNC_(cntkctl, uint32_t, cntkctl_el1)
 DEFINE_REG_WRITE_FUNC_(cntkctl, uint32_t, cntkctl_el1)
 DEFINE_REG_READ_FUNC_(cntps_ctl, uint32_t, cntps_ctl_el1)
diff --git a/core/arch/arm/include/kernel/delay.h b/core/arch/arm/include/kernel/delay.h
index 00510059..34629ba2 100644
--- a/core/arch/arm/include/kernel/delay.h
+++ b/core/arch/arm/include/kernel/delay.h
@@ -44,12 +44,12 @@ static inline uint64_t arm_cnt_us2cnt(uint32_t us)
 
 static inline uint64_t timeout_init_us(uint32_t us)
 {
-	return read_cntpct() + arm_cnt_us2cnt(us);
+	return read_cntvct() + arm_cnt_us2cnt(us);
 }
 
 static inline bool timeout_elapsed(uint64_t expire)
 {
-	return read_cntpct() > expire;
+	return read_cntvct() > expire;
 }
 
 #endif
diff --git a/core/arch/arm/kernel/arm32_sysreg.txt b/core/arch/arm/kernel/arm32_sysreg.txt
index b69ebcb4..155773f8 100644
--- a/core/arch/arm/kernel/arm32_sysreg.txt
+++ b/core/arch/arm/kernel/arm32_sysreg.txt
@@ -117,7 +117,7 @@ VBAR  c12 0 c0 0 RW Vector Base Address Register
 
 @ B8.2 Generic Timer registers summary
 CNTFRQ    c14 0 c0  0 RW Counter Frequency register
-CNTPCT    -   0 c14 - RO Physical Count register
+CNTVCT    -   1 c14 - RO Physical Count register
 CNTKCTL   c14 0 c1  0 RW Timer PL1 Control register
 CNTP_TVAL c14 0 c2  0 RW PL1 Physical TimerValue register
 CNTP_CTL  c14 0 c2  1 RW PL1 Physical Timer Control register
diff --git a/core/arch/arm/kernel/tee_time_arm_cntpct.c b/core/arch/arm/kernel/tee_time_arm_cntpct.c
index 3c41e4c2..04e673d9 100644
--- a/core/arch/arm/kernel/tee_time_arm_cntpct.c
+++ b/core/arch/arm/kernel/tee_time_arm_cntpct.c
@@ -16,7 +16,7 @@
 
 static TEE_Result arm_cntpct_get_sys_time(TEE_Time *time)
 {
-	uint64_t cntpct = read_cntpct();
+	uint64_t cntpct = read_cntvct();
 	uint32_t cntfrq = read_cntfrq();
 
 	time->seconds = cntpct / cntfrq;
@@ -49,7 +49,7 @@ REGISTER_TIME_SOURCE(arm_cntpct_time_source)
 
 void plat_prng_add_jitter_entropy(enum crypto_rng_src sid, unsigned int *pnum)
 {
-	uint64_t tsc = read_cntpct();
+	uint64_t tsc = read_cntvct();
 	int bytes = 0, n;
 	static uint8_t first, bits;
 	static uint16_t acc;
diff --git a/core/kernel/tee_ta_manager.c b/core/kernel/tee_ta_manager.c
index 46632ce7..4153fbd8 100644
--- a/core/kernel/tee_ta_manager.c
+++ b/core/kernel/tee_ta_manager.c
@@ -923,7 +923,7 @@ static void gprof_update_session_utime(bool suspend, struct ts_session *s,
 static void tee_ta_update_session_utime(bool suspend)
 {
 	struct ts_session *s = ts_get_current_session();
-	uint64_t now = read_cntpct();
+	uint64_t now = read_cntvct();
 
 	gprof_update_session_utime(suspend, s, now);
 }
@@ -947,7 +947,7 @@ static void ftrace_update_times(bool suspend)
 	uint64_t now = 0;
 	uint32_t i = 0;
 
-	now = read_cntpct();
+	now = read_cntvct();
 
 	fbuf = s->fbuf;
 	if (!fbuf)
diff --git a/lib/libutee/arch/arm/arm32_user_sysreg.txt b/lib/libutee/arch/arm/arm32_user_sysreg.txt
index 8baefd10..13e28f20 100644
--- a/lib/libutee/arch/arm/arm32_user_sysreg.txt
+++ b/lib/libutee/arch/arm/arm32_user_sysreg.txt
@@ -10,4 +10,4 @@
 
 @ B8.2 Generic Timer registers summary
 CNTFRQ    c14 0 c0  0 RW Counter Frequency register
-CNTPCT    -   0 c14 - RO Physical Count register
+CNTVCT    -   1 c14 - RO Physical Count register
diff --git a/lib/libutee/include/arm64_user_sysreg.h b/lib/libutee/include/arm64_user_sysreg.h
index db4ee188..722a08c9 100644
--- a/lib/libutee/include/arm64_user_sysreg.h
+++ b/lib/libutee/include/arm64_user_sysreg.h
@@ -31,7 +31,7 @@ static inline __noprof void write_##reg(type val)		\
 
 /* ARM Generic timer functions */
 DEFINE_REG_READ_FUNC_(cntfrq, uint32_t, cntfrq_el0)
-DEFINE_REG_READ_FUNC_(cntpct, uint64_t, cntpct_el0)
+DEFINE_REG_READ_FUNC_(cntvct, uint64_t, cntvct_el0)
 DEFINE_REG_READ_FUNC_(tpidr_el0, uint64_t, tpidr_el0)
 DEFINE_REG_WRITE_FUNC_(tpidr_el0, uint64_t, tpidr_el0)
 
diff --git a/lib/libutils/ext/ftrace/ftrace.c b/lib/libutils/ext/ftrace/ftrace.c
index 101aa594..637cbd19 100644
--- a/lib/libutils/ext/ftrace/ftrace.c
+++ b/lib/libutils/ext/ftrace/ftrace.c
@@ -165,7 +165,7 @@ void __noprof ftrace_enter(unsigned long pc, unsigned long *lr)
 
 	if (fbuf->ret_idx < FTRACE_RETFUNC_DEPTH) {
 		fbuf->ret_stack[fbuf->ret_idx] = *lr;
-		fbuf->begin_time[fbuf->ret_idx] = read_cntpct();
+		fbuf->begin_time[fbuf->ret_idx] = read_cntvct();
 		fbuf->ret_idx++;
 	} else {
 		/*
@@ -269,7 +269,7 @@ unsigned long __noprof ftrace_return(void)
 		dur_loc = curr_buf - (fbuf->ret_idx +
 				      (2 * sizeof(unsigned long)) + 11);
 		ftrace_duration(dur_loc, fbuf->begin_time[fbuf->ret_idx],
-				read_cntpct());
+				read_cntvct());
 	} else {
 		bool full = false;
 
@@ -297,7 +297,7 @@ unsigned long __noprof ftrace_return(void)
 			dur_loc = curr_buf - fbuf->ret_idx - 6;
 			ftrace_duration(dur_loc,
 					fbuf->begin_time[fbuf->ret_idx],
-					read_cntpct());
+					read_cntvct());
 		}
 	}
 
-- 
2.29.2

